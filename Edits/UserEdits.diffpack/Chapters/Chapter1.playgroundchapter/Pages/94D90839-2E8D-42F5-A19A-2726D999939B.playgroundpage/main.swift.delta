<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

// fast alles gestohlen von:

let input = load(file: "input05")

let lines = input!.components(separatedBy: .newlines)

let stacksArray = lines[0...8]

// make the moves accessible
let movesArray = lines[10...lines.count-2]

struct Move {
    let count: Int
    let from: Int
    let to: Int
    
    init(count: Int, from: Int, to: Int) {
        self.count = count
        self.from = from
        self.to = to
    }
}

var moves: [Move] = []

for move in movesArray {
    let parts = move.components(separatedBy: " ")
    let countNew = Int(parts[1])!
    let fromNew = Int(parts[3])!
    let toNew = Int(parts[5])!
    
    moves.append(Move(count: countNew, from: fromNew, to: toNew))
}



// now make the crates each into their own dict 
var crates: [Int : [Character]] = [:]

for line in stacksArray {
    for (index, ch) in line.enumerated() {
        if ch.isNumber || ch == " " {
            continue
        }
        if (index-1).isMultiple(of: 4) {
            let crate = 1 + (index-1) / 4
            crates[crate, default: []].append(ch)
        }
    }
}

crates = crates.mapValues {
    $0.reversed()
}

func crateMover9000(oneByOne: Bool) -&gt; String {
    var newCrates = crates
    
    for move in moves {
        let moveFrom = newCrates[move.from]!
        newCrates[move.from] = moveFrom.dropLast(move.count)
        var moving = Array(moveFrom.suffix(move.count))
        if oneByOne {
            moving = Array(moving.reversed())
        }
        newCrates[move.to, default: []].append(contentsOf: moving)
    }
    
    let orderedCrates = newCrates
        .sorted { $0.key &lt; $1.key}
        .compactMap { $0.value.last }
        .map { String($0) }
        .joined()
    return orderedCrates
}

print(crateMover9000(oneByOne: true))

print(crateMover9000(oneByOne: false))
</string>
			<key>ModifiedRange</key>
			<string>{1, 1822}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>

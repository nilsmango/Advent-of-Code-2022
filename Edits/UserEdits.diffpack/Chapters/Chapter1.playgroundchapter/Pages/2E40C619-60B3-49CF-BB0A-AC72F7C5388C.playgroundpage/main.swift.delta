<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation



// find all files with their size and the folders they are in, name doesn't matter: [584 : ["a","e"]] - nope

// einen array mit welchen folders aktiv sind, einen dict wo wir dann die werte hinzuf√ºgen die wir sehen.

extension String {
    var isNumber: Bool {
        let digitsCharacters = CharacterSet(charactersIn: "0123456789")        
        return CharacterSet(charactersIn: self).isSubset(of: digitsCharacters)
    }
}

let input = load(file: "input07")

let test = """
    $ cd /
    $ ls
    dir a
    14848514 b.txt
    8504156 c.dat
    dir d
    $ cd a
    $ ls
    dir e
    29116 f
    2557 g
    62596 h.lst
    $ cd e
    $ ls
    584 i
    $ cd ..
    $ cd ..
    $ cd d
    $ ls
    4060174 j
    8033020 d.log
    5626152 d.ext
    7214296 k
    """

let computeArray = input!.components(separatedBy: .newlines)
//let computeArray = ["dir dwowfn", "$ cd dwrfn", "2323 mega", "232334 also"]

var activeFolders = [String]()
var foldersDict = [String:Int]()


for line in computeArray {
    if line.isEmpty {
        continue
    }
    let first4ofLine = String(line[line.startIndex...line.index(line.startIndex, offsetBy: 3)])
    
    var lineCase = 0
    
    if first4ofLine == "$ cd" {
        if line == "$ cd .." {
            lineCase = 0
        } else {
            lineCase = 1
        }
        
    } else if first4ofLine == "$ ls" || first4ofLine == "dir " {
        lineCase = 2
        
    } else if line.first!.isNumber {
        lineCase = 3
    }
    

    
    switch lineCase {
    // cd to a folder, append folder name to active folders.
    case 0:
        
            activeFolders = activeFolders.dropLast()
    case 1:
            var folderName = String(line[line.index(line.startIndex, offsetBy: 5)...line.index(before: line.endIndex)])
            
        
            activeFolders.append(folderName)
        
    case 3:
            
        let lineComp = line.components(separatedBy: " ")
        let size = Int(lineComp.first!)
        
        for (index, folder) in activeFolders.enumerated() {
            var folderName = String()
            for i in 0...index {
                if i == 0 {
                    folderName += "/"
                } else {
                    folderName += "/" + activeFolders[i]
                }
            }
            
            if foldersDict[folderName] != nil {
                foldersDict[folderName]! += size!
            } else {
                foldersDict[folderName] = size!
            }
            
        }
        
    case 2:
        continue
    
    default:
        continue
    
    }
    
}

// part 01

let filteredFolders = foldersDict.values
    .filter { $0 &lt;= 100000 }
    .reduce(0, +)

print(filteredFolders)

// part 02


let freeSpace = 70000000 - foldersDict["/"]!

let neededFreeSpace = 30000000

let spaceToDelete = neededFreeSpace - freeSpace


let folderToDelete = foldersDict.values
    .filter { $0 &gt;= spaceToDelete }
    .sorted(by: { $0 &lt; $1 })
    .first

print(folderToDelete)

let folderNametoDelete = foldersDict.first(where: { $1 == folderToDelete })?.key

print(folderNametoDelete)

</string>
			<key>ModifiedRange</key>
			<string>{1, 3148}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>

import Foundation

let input = load(file: "input03")

let inputArray = input!.components(separatedBy: .newlines)

// Solution stolen from somewhere I think...

func makePriorityValueDict() -> [String:Int]  {
    let alphabet = "abcdefghijklmnopqrstuvwxyz"
    let lowerCaseArray = Array(alphabet)
    let upperCaseArray = Array(alphabet.uppercased())
    var dict: [String:Int] = [:]
    
    for (index, value) in lowerCaseArray.enumerated() {
        dict[String(value)] = index + 1
    }
    for (index, value) in upperCaseArray.enumerated() {
        dict[String(value)] = index + 27
    }
    return dict
}

let scoreDict = makePriorityValueDict()

// 01
var prioritySum = 0
for line in inputArray {
    let length = line.count / 2
    let firstPart = Set(line.prefix(length))
    let secondPart = Set(line.suffix(length))
    let duplicate = String(firstPart.intersection(secondPart))
    let score = scoreDict[duplicate]
    prioritySum += score ?? 0
}
print(prioritySum)

//02

extension Array {
    func chunked(into size: Int) -> [[Element]] {
        return stride(from: 0, to: count, by: size).map {
            Array(self[$0 ..< Swift.min($0 + size, count)])
        }
    }
}

var prioritySum2 = 0
let chunkedArray = inputArray.chunked(into: 3)
//print(chunkedArray)

for threeLines in chunkedArray {
    if threeLines.count > 1 {
            let one = Set(threeLines[0])
            let two = Set(threeLines[1])
            let three = Set(threeLines[2])
            let duplicate = String(one.intersection(two).intersection(three))
            let score = scoreDict[duplicate]
            prioritySum2 += score ?? 0
    }

    
}
print(prioritySum2)

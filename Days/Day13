// with the help of: https://github.com/gereons/AoC2022/blob/main/Sources/Day13/Day13.swift

import Foundation


let sample = """
    [1,1,3,1,1]
    [1,1,5,1,1]

    [[1],[2,3,4]]
    [[1],4]

    [9]
    [[8,7,6]]

    [[4,4],4,4]
    [[4,4],4,4,4]

    [7,7,7,7]
    [7,7,7]

    []
    [3]

    [[[]]]
    [[]]

    [1,[2,[3,[4,[5,6,7]]]],8,9]
    [1,[2,[3,[4,[5,6,0]]]],8,9]
    """

let rawInput = load(file: "input13")!

enum Data {
    case int(Int)
    case list([Data])
}

extension Data: CustomStringConvertible {
    var description: String {
        var descr = ""
        switch self {
        case .int(let int):
            descr.append("\(int),")
        case .list(let list):
            descr.append("[")
            list.forEach {
                descr.append($0.description)
            }
            descr.append("]")
        }
        return descr
    }
}

// thanks to /u/mayoff on reddit for pointing out how `Decodable` can parse the input
// https://www.reddit.com/r/adventofcode/comments/zkmyh4/2022_day_13_solutions/j00oyl6/?context=3

extension Data: Decodable {
    init(from decoder: Decoder) throws {
        do {
            let c = try decoder.singleValueContainer()
            self = .int(try c.decode(Int.self))
        } catch {
            self = .list(try [Data](from: decoder))
        }
    }
}

// make data comparable, nice!

extension Data: Comparable {
    static func < (lhs: Data, rhs: Data) -> Bool {
        switch (lhs, rhs) {
        case (.int(let i1), .int(let i2)):
            return i1 < i2
        case (.list, .int):
            return lhs < .list([rhs])
        case (.int, .list):
            return .list([lhs]) < rhs
        case (.list(let l1), .list(let l2)):
            for zipped in zip(l1, l2) {
                if zipped.0 < zipped.1 { return true }
                if zipped.0 > zipped.1 { return false }
            }
            return l1.count < l2.count
        }
    }
}




let input = rawInput

var packets = [Data]()
let decoder = JSONDecoder()

let pairs = input.components(separatedBy: "\n\n")


for pair in pairs {
    let pairArr = pair.components(separatedBy: "\n")
    
    let left = try! decoder.decode(Data.self, from: pairArr.first!.data(using: .utf8)!) 
    let right = try! decoder.decode(Data.self, from: pairArr.last!.data(using: .utf8)!)
    
    packets.append(left)
    packets.append(right)
}





func part1() -> Int {
    var count = 0
    for i in stride(from: 0, to: packets.count, by: 2) {
        let m1 = packets[i]
        let m2 = packets[i+1]
        
        let less = m1 < m2
        if less {
            count += i/2 + 1
        }
    }
    return count
}  

    
print(part1())


func part2() -> Int {
    // [[2]]
    // [[6]]
    let divider1 = Data.list([.list([.int(2)])])
    let divider2 = Data.list([.list([.int(6)])])
    packets.append(divider1)
    packets.append(divider2)
    
    packets.sort(by: <)
    
    let pos1 = packets.firstIndex(of: divider1)! + 1
    let pos2 = packets.firstIndex(of: divider2)! + 1
    
    return pos1 * pos2
    
} 



print(part2())

